//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxAndroid/rxandroid/src/test/java/rx/android/schedulers/LooperSchedulerTest.java
//

#include "AndroidOsLooper.h"
#include "CoTouchlabDopplTestingDopplRobolectricTestRunner.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxAndroidPluginsRxAndroidPlugins.h"
#include "RxAndroidPluginsRxAndroidSchedulersHook.h"
#include "RxAndroidSchedulersAndroidSchedulers.h"
#include "RxAndroidSchedulersLooperSchedulerTest.h"
#include "RxAndroidTestutilCountingAction.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxFunctionsAction0.h"
#include "RxScheduler.h"
#include "RxSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"

@interface RxAndroidSchedulersLooperSchedulerTest () {
 @public
  RxScheduler *scheduler_;
}

- (void)runUiThreadTasks;

@end

J2OBJC_FIELD_SETTER(RxAndroidSchedulersLooperSchedulerTest, scheduler_, RxScheduler *)

__attribute__((unused)) static void RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(RxAndroidSchedulersLooperSchedulerTest *self);

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$15();

@interface RxAndroidSchedulersLooperSchedulerTest_1 : RxAndroidPluginsRxAndroidSchedulersHook {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$actionRef_;
  RxAndroidTestutilCountingAction *val$newAction_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                            withRxAndroidTestutilCountingAction:(RxAndroidTestutilCountingAction *)capture$1;

- (id<RxFunctionsAction0>)onScheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidSchedulersLooperSchedulerTest_1)

__attribute__((unused)) static void RxAndroidSchedulersLooperSchedulerTest_1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_(RxAndroidSchedulersLooperSchedulerTest_1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxAndroidTestutilCountingAction *capture$1);

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_1 *new_RxAndroidSchedulersLooperSchedulerTest_1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxAndroidTestutilCountingAction *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_1 *create_RxAndroidSchedulersLooperSchedulerTest_1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxAndroidTestutilCountingAction *capture$1);

@interface RxAndroidSchedulersLooperSchedulerTest_2 : RxAndroidPluginsRxAndroidSchedulersHook {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$workerRef_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

- (id<RxFunctionsAction0>)onScheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidSchedulersLooperSchedulerTest_2)

__attribute__((unused)) static void RxAndroidSchedulersLooperSchedulerTest_2_initWithJavaUtilConcurrentAtomicAtomicReference_(RxAndroidSchedulersLooperSchedulerTest_2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_2 *new_RxAndroidSchedulersLooperSchedulerTest_2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_2 *create_RxAndroidSchedulersLooperSchedulerTest_2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxAndroidSchedulersLooperSchedulerTest_3 : NSObject < JavaLangThread_UncaughtExceptionHandler > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$throwableRef_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)thread
                            withNSException:(NSException *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidSchedulersLooperSchedulerTest_3)

__attribute__((unused)) static void RxAndroidSchedulersLooperSchedulerTest_3_initWithJavaUtilConcurrentAtomicAtomicReference_(RxAndroidSchedulersLooperSchedulerTest_3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_3 *new_RxAndroidSchedulersLooperSchedulerTest_3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_3 *create_RxAndroidSchedulersLooperSchedulerTest_3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxAndroidSchedulersLooperSchedulerTest_4 : NSObject < RxFunctionsAction0 > {
 @public
  JavaLangNullPointerException *val$npe_;
}

- (instancetype)initWithJavaLangNullPointerException:(JavaLangNullPointerException *)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidSchedulersLooperSchedulerTest_4)

__attribute__((unused)) static void RxAndroidSchedulersLooperSchedulerTest_4_initWithJavaLangNullPointerException_(RxAndroidSchedulersLooperSchedulerTest_4 *self, JavaLangNullPointerException *capture$0);

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_4 *new_RxAndroidSchedulersLooperSchedulerTest_4_initWithJavaLangNullPointerException_(JavaLangNullPointerException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_4 *create_RxAndroidSchedulersLooperSchedulerTest_4_initWithJavaLangNullPointerException_(JavaLangNullPointerException *capture$0);

@interface RxAndroidSchedulersLooperSchedulerTest_5 : NSObject < JavaLangThread_UncaughtExceptionHandler > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$throwableRef_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)thread
                            withNSException:(NSException *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidSchedulersLooperSchedulerTest_5)

__attribute__((unused)) static void RxAndroidSchedulersLooperSchedulerTest_5_initWithJavaUtilConcurrentAtomicAtomicReference_(RxAndroidSchedulersLooperSchedulerTest_5 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_5 *new_RxAndroidSchedulersLooperSchedulerTest_5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_5 *create_RxAndroidSchedulersLooperSchedulerTest_5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxAndroidSchedulersLooperSchedulerTest_6 : NSObject < RxFunctionsAction0 > {
 @public
  RxExceptionsOnErrorNotImplementedException *val$oenie_;
}

- (instancetype)initWithRxExceptionsOnErrorNotImplementedException:(RxExceptionsOnErrorNotImplementedException *)capture$0;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidSchedulersLooperSchedulerTest_6)

__attribute__((unused)) static void RxAndroidSchedulersLooperSchedulerTest_6_initWithRxExceptionsOnErrorNotImplementedException_(RxAndroidSchedulersLooperSchedulerTest_6 *self, RxExceptionsOnErrorNotImplementedException *capture$0);

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_6 *new_RxAndroidSchedulersLooperSchedulerTest_6_initWithRxExceptionsOnErrorNotImplementedException_(RxExceptionsOnErrorNotImplementedException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersLooperSchedulerTest_6 *create_RxAndroidSchedulersLooperSchedulerTest_6_initWithRxExceptionsOnErrorNotImplementedException_(RxExceptionsOnErrorNotImplementedException *capture$0);

@implementation RxAndroidSchedulersLooperSchedulerTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidSchedulersLooperSchedulerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  [((RxAndroidPluginsRxAndroidPlugins *) nil_chk(RxAndroidPluginsRxAndroidPlugins_getInstance())) reset];
}

- (void)tearDown {
  [((RxAndroidPluginsRxAndroidPlugins *) nil_chk(RxAndroidPluginsRxAndroidPlugins_getInstance())) reset];
}

- (void)schedulePostsActionImmediately {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  RxAndroidTestutilCountingAction *action = create_RxAndroidTestutilCountingAction_init();
  [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action];
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [action get]);
}

- (void)runUiThreadTasks {
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
}

- (void)scheduleWithDelayPostsActionWithDelay {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  RxAndroidTestutilCountingAction *action = create_RxAndroidTestutilCountingAction_init();
  [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action withLong:3 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [action get]);
  @try {
    JavaLangThread_sleepWithLong_(3000);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [action get]);
}

- (void)unsubscribeCancelsScheduledAction {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  RxAndroidTestutilCountingAction *action = create_RxAndroidTestutilCountingAction_init();
  id<RxSubscription> subscription = [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [action get]);
}

- (void)unsubscribeCancelsScheduledActionWithDelay {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  RxAndroidTestutilCountingAction *action = create_RxAndroidTestutilCountingAction_init();
  id<RxSubscription> subscription = [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action withLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  @try {
    JavaLangThread_sleepWithLong_(3000);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [action get]);
}

- (void)unsubscribeState {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  id<RxFunctionsAction0> action = create_RxAndroidTestutilCountingAction_init();
  id<RxSubscription> subscription = [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action];
  OrgJunitAssert_assertFalseWithBoolean_([((id<RxSubscription>) nil_chk(subscription)) isUnsubscribed]);
  [subscription unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([subscription isUnsubscribed]);
}

- (void)schedulerHookIsUsed {
  RxAndroidTestutilCountingAction *newAction = create_RxAndroidTestutilCountingAction_init();
  JavaUtilConcurrentAtomicAtomicReference *actionRef = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxAndroidPluginsRxAndroidPlugins *) nil_chk(RxAndroidPluginsRxAndroidPlugins_getInstance())) registerSchedulersHookWithRxAndroidPluginsRxAndroidSchedulersHook:create_RxAndroidSchedulersLooperSchedulerTest_1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_(actionRef, newAction)];
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  RxAndroidTestutilCountingAction *action = create_RxAndroidTestutilCountingAction_init();
  [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action];
  OrgJunitAssert_assertSameWithId_withId_(action, [actionRef get]);
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [newAction get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [action get]);
}

- (void)workerUnsubscriptionPreventsScheduling {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  [((RxScheduler_Worker *) nil_chk(worker)) unsubscribe];
  RxAndroidTestutilCountingAction *action = create_RxAndroidTestutilCountingAction_init();
  [worker scheduleWithRxFunctionsAction0:action];
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [action get]);
}

- (void)workerUnsubscriptionDuringSchedulingCancelsScheduledAction {
  JavaUtilConcurrentAtomicAtomicReference *workerRef = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxAndroidPluginsRxAndroidPlugins *) nil_chk(RxAndroidPluginsRxAndroidPlugins_getInstance())) registerSchedulersHookWithRxAndroidPluginsRxAndroidSchedulersHook:create_RxAndroidSchedulersLooperSchedulerTest_2_initWithJavaUtilConcurrentAtomicAtomicReference_(workerRef)];
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  [workerRef setWithId:worker];
  RxAndroidTestutilCountingAction *action = create_RxAndroidTestutilCountingAction_init();
  [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action];
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [action get]);
}

- (void)workerUnsubscriptionCancelsScheduled {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  RxAndroidTestutilCountingAction *action = create_RxAndroidTestutilCountingAction_init();
  [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES)];
  [worker unsubscribe];
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [action get]);
}

- (void)workerUnsubscribeState {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  OrgJunitAssert_assertFalseWithBoolean_([((RxScheduler_Worker *) nil_chk(worker)) isUnsubscribed]);
  [worker unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([worker isUnsubscribed]);
}

- (void)throwingActionRoutedToHookAndThreadHandler {
  JavaLangThread *thread = [((AndroidOsLooper *) nil_chk(AndroidOsLooper_getMainLooper())) getThread];
  id<JavaLangThread_UncaughtExceptionHandler> originalHandler = [((JavaLangThread *) nil_chk(thread)) getUncaughtExceptionHandler];
  JavaUtilConcurrentAtomicAtomicReference *throwableRef = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [thread setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:create_RxAndroidSchedulersLooperSchedulerTest_3_initWithJavaUtilConcurrentAtomicAtomicReference_(throwableRef)];
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  JavaLangNullPointerException *npe = create_JavaLangNullPointerException_init();
  id<RxFunctionsAction0> action = create_RxAndroidSchedulersLooperSchedulerTest_4_initWithJavaLangNullPointerException_(npe);
  [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action];
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  NSException *throwable = [throwableRef get];
  OrgJunitAssert_assertTrueWithBoolean_([throwable isKindOfClass:[JavaLangIllegalStateException class]]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"Fatal Exception thrown on Scheduler.Worker thread.", [((NSException *) nil_chk(throwable)) getMessage]);
  OrgJunitAssert_assertSameWithId_withId_(npe, [throwable getCause]);
  [thread setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:originalHandler];
}

- (void)actionMissingErrorHandlerRoutedToHookAndThreadHandler {
  JavaLangThread *thread = [((AndroidOsLooper *) nil_chk(AndroidOsLooper_getMainLooper())) getThread];
  id<JavaLangThread_UncaughtExceptionHandler> originalHandler = [((JavaLangThread *) nil_chk(thread)) getUncaughtExceptionHandler];
  JavaUtilConcurrentAtomicAtomicReference *throwableRef = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [thread setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:create_RxAndroidSchedulersLooperSchedulerTest_5_initWithJavaUtilConcurrentAtomicAtomicReference_(throwableRef)];
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  RxExceptionsOnErrorNotImplementedException *oenie = create_RxExceptionsOnErrorNotImplementedException_initWithNSException_(create_JavaLangNullPointerException_init());
  id<RxFunctionsAction0> action = create_RxAndroidSchedulersLooperSchedulerTest_6_initWithRxExceptionsOnErrorNotImplementedException_(oenie);
  [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action];
  RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(self);
  NSException *throwable = [throwableRef get];
  OrgJunitAssert_assertTrueWithBoolean_([throwable isKindOfClass:[JavaLangIllegalStateException class]]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"Exception thrown on Scheduler.Worker thread. Add `onError` handling.", [((NSException *) nil_chk(throwable)) getMessage]);
  OrgJunitAssert_assertSameWithId_withId_(oenie, [throwable getCause]);
  [thread setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:originalHandler];
}

- (void)fromNullThrows {
  @try {
    RxAndroidSchedulersAndroidSchedulers_fromWithAndroidOsLooper_(nil);
    OrgJunitAssert_fail();
  }
  @catch (JavaLangNullPointerException *e) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"looper == null", [((JavaLangNullPointerException *) nil_chk(e)) getMessage]);
  }
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(tearDown);
  methods[3].selector = @selector(schedulePostsActionImmediately);
  methods[4].selector = @selector(runUiThreadTasks);
  methods[5].selector = @selector(scheduleWithDelayPostsActionWithDelay);
  methods[6].selector = @selector(unsubscribeCancelsScheduledAction);
  methods[7].selector = @selector(unsubscribeCancelsScheduledActionWithDelay);
  methods[8].selector = @selector(unsubscribeState);
  methods[9].selector = @selector(schedulerHookIsUsed);
  methods[10].selector = @selector(workerUnsubscriptionPreventsScheduling);
  methods[11].selector = @selector(workerUnsubscriptionDuringSchedulingCancelsScheduledAction);
  methods[12].selector = @selector(workerUnsubscriptionCancelsScheduled);
  methods[13].selector = @selector(workerUnsubscribeState);
  methods[14].selector = @selector(throwingActionRoutedToHookAndThreadHandler);
  methods[15].selector = @selector(actionMissingErrorHandlerRoutedToHookAndThreadHandler);
  methods[16].selector = @selector(fromNullThrows);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$0, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$1, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$2, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$3, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$4, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$5, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$6, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$7, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$8, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$9, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$10, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$11, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$12, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$13, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$14, (void *)&RxAndroidSchedulersLooperSchedulerTest__Annotations$15 };
  static const J2ObjcClassInfo _RxAndroidSchedulersLooperSchedulerTest = { "LooperSchedulerTest", "rx.android.schedulers", ptrTable, methods, fields, 7, 0x1, 17, 1, -1, -1, -1, -1, 15 };
  return &_RxAndroidSchedulersLooperSchedulerTest;
}

@end

void RxAndroidSchedulersLooperSchedulerTest_init(RxAndroidSchedulersLooperSchedulerTest *self) {
  NSObject_init(self);
  JreStrongAssign(&self->scheduler_, RxAndroidSchedulersAndroidSchedulers_fromWithAndroidOsLooper_(AndroidOsLooper_getMainLooper()));
}

RxAndroidSchedulersLooperSchedulerTest *new_RxAndroidSchedulersLooperSchedulerTest_init() {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersLooperSchedulerTest, init)
}

RxAndroidSchedulersLooperSchedulerTest *create_RxAndroidSchedulersLooperSchedulerTest_init() {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersLooperSchedulerTest, init)
}

void RxAndroidSchedulersLooperSchedulerTest_runUiThreadTasks(RxAndroidSchedulersLooperSchedulerTest *self) {
  @try {
    JavaLangThread_sleepWithLong_(500);
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersLooperSchedulerTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(CoTouchlabDopplTestingDopplRobolectricTestRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidSchedulersLooperSchedulerTest)

@implementation RxAndroidSchedulersLooperSchedulerTest_1

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                            withRxAndroidTestutilCountingAction:(RxAndroidTestutilCountingAction *)capture$1 {
  RxAndroidSchedulersLooperSchedulerTest_1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_(self, capture$0, capture$1);
  return self;
}

- (id<RxFunctionsAction0>)onScheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$actionRef_)) setWithId:action];
  return val$newAction_;
}

- (void)dealloc {
  RELEASE_(val$actionRef_);
  RELEASE_(val$newAction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxFunctionsAction0;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withRxAndroidTestutilCountingAction:);
  methods[1].selector = @selector(onScheduleWithRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$actionRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$newAction_", "LRxAndroidTestutilCountingAction;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSchedule", "LRxFunctionsAction0;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/functions/Action0;>;", "LRxAndroidSchedulersLooperSchedulerTest;", "schedulerHookIsUsed" };
  static const J2ObjcClassInfo _RxAndroidSchedulersLooperSchedulerTest_1 = { "", "rx.android.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxAndroidSchedulersLooperSchedulerTest_1;
}

@end

void RxAndroidSchedulersLooperSchedulerTest_1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_(RxAndroidSchedulersLooperSchedulerTest_1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxAndroidTestutilCountingAction *capture$1) {
  JreStrongAssign(&self->val$actionRef_, capture$0);
  JreStrongAssign(&self->val$newAction_, capture$1);
  RxAndroidPluginsRxAndroidSchedulersHook_init(self);
}

RxAndroidSchedulersLooperSchedulerTest_1 *new_RxAndroidSchedulersLooperSchedulerTest_1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxAndroidTestutilCountingAction *capture$1) {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersLooperSchedulerTest_1, initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_, capture$0, capture$1)
}

RxAndroidSchedulersLooperSchedulerTest_1 *create_RxAndroidSchedulersLooperSchedulerTest_1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxAndroidTestutilCountingAction *capture$1) {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersLooperSchedulerTest_1, initWithJavaUtilConcurrentAtomicAtomicReference_withRxAndroidTestutilCountingAction_, capture$0, capture$1)
}

@implementation RxAndroidSchedulersLooperSchedulerTest_2

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxAndroidSchedulersLooperSchedulerTest_2_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (id<RxFunctionsAction0>)onScheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  [((RxScheduler_Worker *) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$workerRef_)) get])) unsubscribe];
  return [super onScheduleWithRxFunctionsAction0:action];
}

- (void)dealloc {
  RELEASE_(val$workerRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxFunctionsAction0;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(onScheduleWithRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$workerRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "onSchedule", "LRxFunctionsAction0;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Scheduler$Worker;>;", "LRxAndroidSchedulersLooperSchedulerTest;", "workerUnsubscriptionDuringSchedulingCancelsScheduledAction" };
  static const J2ObjcClassInfo _RxAndroidSchedulersLooperSchedulerTest_2 = { "", "rx.android.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxAndroidSchedulersLooperSchedulerTest_2;
}

@end

void RxAndroidSchedulersLooperSchedulerTest_2_initWithJavaUtilConcurrentAtomicAtomicReference_(RxAndroidSchedulersLooperSchedulerTest_2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$workerRef_, capture$0);
  RxAndroidPluginsRxAndroidSchedulersHook_init(self);
}

RxAndroidSchedulersLooperSchedulerTest_2 *new_RxAndroidSchedulersLooperSchedulerTest_2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersLooperSchedulerTest_2, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxAndroidSchedulersLooperSchedulerTest_2 *create_RxAndroidSchedulersLooperSchedulerTest_2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersLooperSchedulerTest_2, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxAndroidSchedulersLooperSchedulerTest_3

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxAndroidSchedulersLooperSchedulerTest_3_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)thread
                            withNSException:(NSException *)ex {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$throwableRef_)) setWithId:ex];
}

- (void)dealloc {
  RELEASE_(val$throwableRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(uncaughtExceptionWithJavaLangThread:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$throwableRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "uncaughtException", "LJavaLangThread;LNSException;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxAndroidSchedulersLooperSchedulerTest;", "throwingActionRoutedToHookAndThreadHandler" };
  static const J2ObjcClassInfo _RxAndroidSchedulersLooperSchedulerTest_3 = { "", "rx.android.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxAndroidSchedulersLooperSchedulerTest_3;
}

@end

void RxAndroidSchedulersLooperSchedulerTest_3_initWithJavaUtilConcurrentAtomicAtomicReference_(RxAndroidSchedulersLooperSchedulerTest_3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$throwableRef_, capture$0);
  NSObject_init(self);
}

RxAndroidSchedulersLooperSchedulerTest_3 *new_RxAndroidSchedulersLooperSchedulerTest_3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersLooperSchedulerTest_3, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxAndroidSchedulersLooperSchedulerTest_3 *create_RxAndroidSchedulersLooperSchedulerTest_3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersLooperSchedulerTest_3, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxAndroidSchedulersLooperSchedulerTest_4

- (instancetype)initWithJavaLangNullPointerException:(JavaLangNullPointerException *)capture$0 {
  RxAndroidSchedulersLooperSchedulerTest_4_initWithJavaLangNullPointerException_(self, capture$0);
  return self;
}

- (void)call {
  @throw val$npe_;
}

- (void)dealloc {
  RELEASE_(val$npe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangNullPointerException:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$npe_", "LJavaLangNullPointerException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxAndroidSchedulersLooperSchedulerTest;", "throwingActionRoutedToHookAndThreadHandler" };
  static const J2ObjcClassInfo _RxAndroidSchedulersLooperSchedulerTest_4 = { "", "rx.android.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxAndroidSchedulersLooperSchedulerTest_4;
}

@end

void RxAndroidSchedulersLooperSchedulerTest_4_initWithJavaLangNullPointerException_(RxAndroidSchedulersLooperSchedulerTest_4 *self, JavaLangNullPointerException *capture$0) {
  JreStrongAssign(&self->val$npe_, capture$0);
  NSObject_init(self);
}

RxAndroidSchedulersLooperSchedulerTest_4 *new_RxAndroidSchedulersLooperSchedulerTest_4_initWithJavaLangNullPointerException_(JavaLangNullPointerException *capture$0) {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersLooperSchedulerTest_4, initWithJavaLangNullPointerException_, capture$0)
}

RxAndroidSchedulersLooperSchedulerTest_4 *create_RxAndroidSchedulersLooperSchedulerTest_4_initWithJavaLangNullPointerException_(JavaLangNullPointerException *capture$0) {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersLooperSchedulerTest_4, initWithJavaLangNullPointerException_, capture$0)
}

@implementation RxAndroidSchedulersLooperSchedulerTest_5

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxAndroidSchedulersLooperSchedulerTest_5_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)thread
                            withNSException:(NSException *)ex {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$throwableRef_)) setWithId:ex];
}

- (void)dealloc {
  RELEASE_(val$throwableRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[1].selector = @selector(uncaughtExceptionWithJavaLangThread:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$throwableRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "uncaughtException", "LJavaLangThread;LNSException;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxAndroidSchedulersLooperSchedulerTest;", "actionMissingErrorHandlerRoutedToHookAndThreadHandler" };
  static const J2ObjcClassInfo _RxAndroidSchedulersLooperSchedulerTest_5 = { "", "rx.android.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxAndroidSchedulersLooperSchedulerTest_5;
}

@end

void RxAndroidSchedulersLooperSchedulerTest_5_initWithJavaUtilConcurrentAtomicAtomicReference_(RxAndroidSchedulersLooperSchedulerTest_5 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$throwableRef_, capture$0);
  NSObject_init(self);
}

RxAndroidSchedulersLooperSchedulerTest_5 *new_RxAndroidSchedulersLooperSchedulerTest_5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersLooperSchedulerTest_5, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxAndroidSchedulersLooperSchedulerTest_5 *create_RxAndroidSchedulersLooperSchedulerTest_5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersLooperSchedulerTest_5, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxAndroidSchedulersLooperSchedulerTest_6

- (instancetype)initWithRxExceptionsOnErrorNotImplementedException:(RxExceptionsOnErrorNotImplementedException *)capture$0 {
  RxAndroidSchedulersLooperSchedulerTest_6_initWithRxExceptionsOnErrorNotImplementedException_(self, capture$0);
  return self;
}

- (void)call {
  @throw val$oenie_;
}

- (void)dealloc {
  RELEASE_(val$oenie_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxExceptionsOnErrorNotImplementedException:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$oenie_", "LRxExceptionsOnErrorNotImplementedException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxAndroidSchedulersLooperSchedulerTest;", "actionMissingErrorHandlerRoutedToHookAndThreadHandler" };
  static const J2ObjcClassInfo _RxAndroidSchedulersLooperSchedulerTest_6 = { "", "rx.android.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxAndroidSchedulersLooperSchedulerTest_6;
}

@end

void RxAndroidSchedulersLooperSchedulerTest_6_initWithRxExceptionsOnErrorNotImplementedException_(RxAndroidSchedulersLooperSchedulerTest_6 *self, RxExceptionsOnErrorNotImplementedException *capture$0) {
  JreStrongAssign(&self->val$oenie_, capture$0);
  NSObject_init(self);
}

RxAndroidSchedulersLooperSchedulerTest_6 *new_RxAndroidSchedulersLooperSchedulerTest_6_initWithRxExceptionsOnErrorNotImplementedException_(RxExceptionsOnErrorNotImplementedException *capture$0) {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersLooperSchedulerTest_6, initWithRxExceptionsOnErrorNotImplementedException_, capture$0)
}

RxAndroidSchedulersLooperSchedulerTest_6 *create_RxAndroidSchedulersLooperSchedulerTest_6_initWithRxExceptionsOnErrorNotImplementedException_(RxExceptionsOnErrorNotImplementedException *capture$0) {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersLooperSchedulerTest_6, initWithRxExceptionsOnErrorNotImplementedException_, capture$0)
}
