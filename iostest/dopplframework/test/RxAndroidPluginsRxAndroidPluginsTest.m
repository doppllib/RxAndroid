//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxAndroid/rxandroid/src/test/java/rx/android/plugins/RxAndroidPluginsTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxAndroidPluginsRxAndroidPlugins.h"
#include "RxAndroidPluginsRxAndroidPluginsTest.h"
#include "RxAndroidPluginsRxAndroidSchedulersHook.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxAndroidPluginsRxAndroidPluginsTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxAndroidPluginsRxAndroidPluginsTest__Annotations$1();

@implementation RxAndroidPluginsRxAndroidPluginsTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidPluginsRxAndroidPluginsTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)registeredSchedulersHookIsUsed {
  RxAndroidPluginsRxAndroidPlugins *plugins = create_RxAndroidPluginsRxAndroidPlugins_init();
  RxAndroidPluginsRxAndroidSchedulersHook *hook = create_RxAndroidPluginsRxAndroidSchedulersHook_init();
  [plugins registerSchedulersHookWithRxAndroidPluginsRxAndroidSchedulersHook:hook];
  OrgJunitAssert_assertSameWithId_withId_(hook, [plugins getSchedulersHook]);
}

- (void)registerSchedulersHookTwiceFails {
  RxAndroidPluginsRxAndroidPlugins *plugins = create_RxAndroidPluginsRxAndroidPlugins_init();
  RxAndroidPluginsRxAndroidSchedulersHook *hook = create_RxAndroidPluginsRxAndroidSchedulersHook_init();
  [plugins registerSchedulersHookWithRxAndroidPluginsRxAndroidSchedulersHook:hook];
  @try {
    [plugins registerSchedulersHookWithRxAndroidPluginsRxAndroidSchedulersHook:hook];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangIllegalStateException *e) {
    OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangIllegalStateException *) nil_chk(e)) getMessage])) hasPrefix:@"Another strategy was already registered:"]);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(registeredSchedulersHookIsUsed);
  methods[2].selector = @selector(registerSchedulersHookTwiceFails);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxAndroidPluginsRxAndroidPluginsTest__Annotations$0, (void *)&RxAndroidPluginsRxAndroidPluginsTest__Annotations$1 };
  static const J2ObjcClassInfo _RxAndroidPluginsRxAndroidPluginsTest = { "RxAndroidPluginsTest", "rx.android.plugins", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxAndroidPluginsRxAndroidPluginsTest;
}

@end

void RxAndroidPluginsRxAndroidPluginsTest_init(RxAndroidPluginsRxAndroidPluginsTest *self) {
  NSObject_init(self);
}

RxAndroidPluginsRxAndroidPluginsTest *new_RxAndroidPluginsRxAndroidPluginsTest_init() {
  J2OBJC_NEW_IMPL(RxAndroidPluginsRxAndroidPluginsTest, init)
}

RxAndroidPluginsRxAndroidPluginsTest *create_RxAndroidPluginsRxAndroidPluginsTest_init() {
  J2OBJC_CREATE_IMPL(RxAndroidPluginsRxAndroidPluginsTest, init)
}

IOSObjectArray *RxAndroidPluginsRxAndroidPluginsTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidPluginsRxAndroidPluginsTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidPluginsRxAndroidPluginsTest)
