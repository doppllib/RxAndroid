//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxAndroid/rxandroid/src/test/java/rx/android/MainThreadSubscriptionTest.java
//

#include "AndroidOsHandler.h"
#include "AndroidOsLooper.h"
#include "CoTouchlabDopplTestingDopplRobolectricTestRunner.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxAndroidMainThreadSubscription.h"
#include "RxAndroidMainThreadSubscriptionTest.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"

@interface RxAndroidMainThreadSubscriptionTest ()

- (void)shortSleep;

@end

__attribute__((unused)) static void RxAndroidMainThreadSubscriptionTest_shortSleep(RxAndroidMainThreadSubscriptionTest *self);

__attribute__((unused)) static IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$5();

@interface RxAndroidMainThreadSubscriptionTest_1 : NSObject < JavaLangRunnable >

- (instancetype)init;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidMainThreadSubscriptionTest_1)

__attribute__((unused)) static void RxAndroidMainThreadSubscriptionTest_1_init(RxAndroidMainThreadSubscriptionTest_1 *self);

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_1 *new_RxAndroidMainThreadSubscriptionTest_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_1 *create_RxAndroidMainThreadSubscriptionTest_1_init();

@interface RxAndroidMainThreadSubscriptionTest_2 : NSObject < JavaLangRunnable > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidMainThreadSubscriptionTest_2)

__attribute__((unused)) static void RxAndroidMainThreadSubscriptionTest_2_initWithJavaUtilConcurrentCountDownLatch_(RxAndroidMainThreadSubscriptionTest_2 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_2 *new_RxAndroidMainThreadSubscriptionTest_2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_2 *create_RxAndroidMainThreadSubscriptionTest_2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxAndroidMainThreadSubscriptionTest_3 : RxAndroidMainThreadSubscription {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$called_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

- (void)onUnsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidMainThreadSubscriptionTest_3)

__attribute__((unused)) static void RxAndroidMainThreadSubscriptionTest_3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxAndroidMainThreadSubscriptionTest_3 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_3 *new_RxAndroidMainThreadSubscriptionTest_3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_3 *create_RxAndroidMainThreadSubscriptionTest_3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxAndroidMainThreadSubscriptionTest_4 : RxAndroidMainThreadSubscription {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$called_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

- (void)onUnsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidMainThreadSubscriptionTest_4)

__attribute__((unused)) static void RxAndroidMainThreadSubscriptionTest_4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxAndroidMainThreadSubscriptionTest_4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_4 *new_RxAndroidMainThreadSubscriptionTest_4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_4 *create_RxAndroidMainThreadSubscriptionTest_4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxAndroidMainThreadSubscriptionTest_5 : NSObject < JavaLangRunnable > {
 @public
  RxAndroidMainThreadSubscriptionTest *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$called_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (instancetype)initWithRxAndroidMainThreadSubscriptionTest:(RxAndroidMainThreadSubscriptionTest *)outer$
                  withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                       withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidMainThreadSubscriptionTest_5)

__attribute__((unused)) static void RxAndroidMainThreadSubscriptionTest_5_initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxAndroidMainThreadSubscriptionTest_5 *self, RxAndroidMainThreadSubscriptionTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_5 *new_RxAndroidMainThreadSubscriptionTest_5_initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxAndroidMainThreadSubscriptionTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_5 *create_RxAndroidMainThreadSubscriptionTest_5_initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxAndroidMainThreadSubscriptionTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxAndroidMainThreadSubscriptionTest_5_1 : RxAndroidMainThreadSubscription {
 @public
  RxAndroidMainThreadSubscriptionTest_5 *this$0_;
}

- (instancetype)initWithRxAndroidMainThreadSubscriptionTest_5:(RxAndroidMainThreadSubscriptionTest_5 *)outer$;

- (void)onUnsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidMainThreadSubscriptionTest_5_1)

__attribute__((unused)) static void RxAndroidMainThreadSubscriptionTest_5_1_initWithRxAndroidMainThreadSubscriptionTest_5_(RxAndroidMainThreadSubscriptionTest_5_1 *self, RxAndroidMainThreadSubscriptionTest_5 *outer$);

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_5_1 *new_RxAndroidMainThreadSubscriptionTest_5_1_initWithRxAndroidMainThreadSubscriptionTest_5_(RxAndroidMainThreadSubscriptionTest_5 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidMainThreadSubscriptionTest_5_1 *create_RxAndroidMainThreadSubscriptionTest_5_1_initWithRxAndroidMainThreadSubscriptionTest_5_(RxAndroidMainThreadSubscriptionTest_5 *outer$);

@implementation RxAndroidMainThreadSubscriptionTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidMainThreadSubscriptionTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)verifyDoesNotThrowOnMainThread {
  [create_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper_getMainLooper()) postWithJavaLangRunnable:create_RxAndroidMainThreadSubscriptionTest_1_init()];
}

- (void)verifyThrowsOffMainThread {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxAndroidMainThreadSubscriptionTest_2_initWithJavaUtilConcurrentCountDownLatch_(latch)) start];
  OrgJunitAssert_assertTrueWithBoolean_([latch awaitWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
}

- (void)onUnsubscribeRunsSyncOnMainThread {
  JavaUtilConcurrentAtomicAtomicBoolean *called = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [create_RxAndroidMainThreadSubscriptionTest_3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(called) unsubscribe];
  RxAndroidMainThreadSubscriptionTest_shortSleep(self);
  OrgJunitAssert_assertTrueWithBoolean_([called get]);
}

- (void)unsubscribeTwiceDoesNotRunTwice {
  JavaUtilConcurrentAtomicAtomicInteger *called = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  RxAndroidMainThreadSubscription *subscription = create_RxAndroidMainThreadSubscriptionTest_4_initWithJavaUtilConcurrentAtomicAtomicInteger_(called);
  [subscription unsubscribe];
  [subscription unsubscribe];
  [subscription unsubscribe];
  RxAndroidMainThreadSubscriptionTest_shortSleep(self);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [called get]);
}

- (void)shortSleep {
  RxAndroidMainThreadSubscriptionTest_shortSleep(self);
}

- (void)onUnsubscribePostsOffMainThread {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicBoolean *called = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxAndroidMainThreadSubscriptionTest_5_initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(self, called, latch)) start];
  OrgJunitAssert_assertTrueWithBoolean_([latch awaitWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  OrgJunitAssert_assertFalseWithBoolean_([called get]);
  RxAndroidMainThreadSubscriptionTest_shortSleep(self);
  RxAndroidMainThreadSubscriptionTest_shortSleep(self);
  OrgJunitAssert_assertTrueWithBoolean_([called get]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 5, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verifyDoesNotThrowOnMainThread);
  methods[2].selector = @selector(verifyThrowsOffMainThread);
  methods[3].selector = @selector(onUnsubscribeRunsSyncOnMainThread);
  methods[4].selector = @selector(unsubscribeTwiceDoesNotRunTwice);
  methods[5].selector = @selector(shortSleep);
  methods[6].selector = @selector(onUnsubscribePostsOffMainThread);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxAndroidMainThreadSubscriptionTest__Annotations$0, (void *)&RxAndroidMainThreadSubscriptionTest__Annotations$1, (void *)&RxAndroidMainThreadSubscriptionTest__Annotations$2, (void *)&RxAndroidMainThreadSubscriptionTest__Annotations$3, (void *)&RxAndroidMainThreadSubscriptionTest__Annotations$4, (void *)&RxAndroidMainThreadSubscriptionTest__Annotations$5 };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscriptionTest = { "MainThreadSubscriptionTest", "rx.android", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, 6 };
  return &_RxAndroidMainThreadSubscriptionTest;
}

@end

void RxAndroidMainThreadSubscriptionTest_init(RxAndroidMainThreadSubscriptionTest *self) {
  NSObject_init(self);
}

RxAndroidMainThreadSubscriptionTest *new_RxAndroidMainThreadSubscriptionTest_init() {
  J2OBJC_NEW_IMPL(RxAndroidMainThreadSubscriptionTest, init)
}

RxAndroidMainThreadSubscriptionTest *create_RxAndroidMainThreadSubscriptionTest_init() {
  J2OBJC_CREATE_IMPL(RxAndroidMainThreadSubscriptionTest, init)
}

void RxAndroidMainThreadSubscriptionTest_shortSleep(RxAndroidMainThreadSubscriptionTest *self) {
  @try {
    JavaLangThread_sleepWithLong_(500);
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidMainThreadSubscriptionTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(CoTouchlabDopplTestingDopplRobolectricTestRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidMainThreadSubscriptionTest)

@implementation RxAndroidMainThreadSubscriptionTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidMainThreadSubscriptionTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)run {
  RxAndroidMainThreadSubscription_verifyMainThread();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxAndroidMainThreadSubscriptionTest;", "verifyDoesNotThrowOnMainThread" };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscriptionTest_1 = { "", "rx.android", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxAndroidMainThreadSubscriptionTest_1;
}

@end

void RxAndroidMainThreadSubscriptionTest_1_init(RxAndroidMainThreadSubscriptionTest_1 *self) {
  NSObject_init(self);
}

RxAndroidMainThreadSubscriptionTest_1 *new_RxAndroidMainThreadSubscriptionTest_1_init() {
  J2OBJC_NEW_IMPL(RxAndroidMainThreadSubscriptionTest_1, init)
}

RxAndroidMainThreadSubscriptionTest_1 *create_RxAndroidMainThreadSubscriptionTest_1_init() {
  J2OBJC_CREATE_IMPL(RxAndroidMainThreadSubscriptionTest_1, init)
}

@implementation RxAndroidMainThreadSubscriptionTest_2

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxAndroidMainThreadSubscriptionTest_2_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)run {
  @try {
    RxAndroidMainThreadSubscription_verifyMainThread();
    OrgJunitAssert_fail();
  }
  @catch (JavaLangIllegalStateException *e) {
    OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangIllegalStateException *) nil_chk(e)) getMessage])) hasPrefix:@"Expected to be called on the main thread"]);
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxAndroidMainThreadSubscriptionTest;", "verifyThrowsOffMainThread" };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscriptionTest_2 = { "", "rx.android", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxAndroidMainThreadSubscriptionTest_2;
}

@end

void RxAndroidMainThreadSubscriptionTest_2_initWithJavaUtilConcurrentCountDownLatch_(RxAndroidMainThreadSubscriptionTest_2 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxAndroidMainThreadSubscriptionTest_2 *new_RxAndroidMainThreadSubscriptionTest_2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxAndroidMainThreadSubscriptionTest_2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxAndroidMainThreadSubscriptionTest_2 *create_RxAndroidMainThreadSubscriptionTest_2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxAndroidMainThreadSubscriptionTest_2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxAndroidMainThreadSubscriptionTest_3

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxAndroidMainThreadSubscriptionTest_3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)onUnsubscribe {
  if (AndroidOsLooper_myLooper() != AndroidOsLooper_getMainLooper()) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Wrong thread");
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$called_)) setWithBoolean:true];
}

- (void)dealloc {
  RELEASE_(val$called_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  methods[1].selector = @selector(onUnsubscribe);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$called_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxAndroidMainThreadSubscriptionTest;", "onUnsubscribeRunsSyncOnMainThread" };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscriptionTest_3 = { "", "rx.android", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxAndroidMainThreadSubscriptionTest_3;
}

@end

void RxAndroidMainThreadSubscriptionTest_3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxAndroidMainThreadSubscriptionTest_3 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$called_, capture$0);
  RxAndroidMainThreadSubscription_init(self);
}

RxAndroidMainThreadSubscriptionTest_3 *new_RxAndroidMainThreadSubscriptionTest_3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxAndroidMainThreadSubscriptionTest_3, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxAndroidMainThreadSubscriptionTest_3 *create_RxAndroidMainThreadSubscriptionTest_3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxAndroidMainThreadSubscriptionTest_3, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxAndroidMainThreadSubscriptionTest_4

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxAndroidMainThreadSubscriptionTest_4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)onUnsubscribe {
  if (AndroidOsLooper_myLooper() != AndroidOsLooper_getMainLooper()) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Wrong thread");
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$called_)) incrementAndGet];
}

- (void)dealloc {
  RELEASE_(val$called_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[1].selector = @selector(onUnsubscribe);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$called_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxAndroidMainThreadSubscriptionTest;", "unsubscribeTwiceDoesNotRunTwice" };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscriptionTest_4 = { "", "rx.android", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxAndroidMainThreadSubscriptionTest_4;
}

@end

void RxAndroidMainThreadSubscriptionTest_4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxAndroidMainThreadSubscriptionTest_4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$called_, capture$0);
  RxAndroidMainThreadSubscription_init(self);
}

RxAndroidMainThreadSubscriptionTest_4 *new_RxAndroidMainThreadSubscriptionTest_4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxAndroidMainThreadSubscriptionTest_4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxAndroidMainThreadSubscriptionTest_4 *create_RxAndroidMainThreadSubscriptionTest_4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxAndroidMainThreadSubscriptionTest_4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxAndroidMainThreadSubscriptionTest_5

- (instancetype)initWithRxAndroidMainThreadSubscriptionTest:(RxAndroidMainThreadSubscriptionTest *)outer$
                  withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                       withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxAndroidMainThreadSubscriptionTest_5_initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)run {
  [create_RxAndroidMainThreadSubscriptionTest_5_1_initWithRxAndroidMainThreadSubscriptionTest_5_(self) unsubscribe];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$called_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxAndroidMainThreadSubscriptionTest:withJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentCountDownLatch:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxAndroidMainThreadSubscriptionTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$called_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxAndroidMainThreadSubscriptionTest;", "onUnsubscribePostsOffMainThread" };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscriptionTest_5 = { "", "rx.android", ptrTable, methods, fields, 7, 0x8018, 2, 3, 0, -1, 1, -1, -1 };
  return &_RxAndroidMainThreadSubscriptionTest_5;
}

@end

void RxAndroidMainThreadSubscriptionTest_5_initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxAndroidMainThreadSubscriptionTest_5 *self, RxAndroidMainThreadSubscriptionTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$called_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  NSObject_init(self);
}

RxAndroidMainThreadSubscriptionTest_5 *new_RxAndroidMainThreadSubscriptionTest_5_initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxAndroidMainThreadSubscriptionTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxAndroidMainThreadSubscriptionTest_5, initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1)
}

RxAndroidMainThreadSubscriptionTest_5 *create_RxAndroidMainThreadSubscriptionTest_5_initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxAndroidMainThreadSubscriptionTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxAndroidMainThreadSubscriptionTest_5, initWithRxAndroidMainThreadSubscriptionTest_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1)
}

@implementation RxAndroidMainThreadSubscriptionTest_5_1

- (instancetype)initWithRxAndroidMainThreadSubscriptionTest_5:(RxAndroidMainThreadSubscriptionTest_5 *)outer$ {
  RxAndroidMainThreadSubscriptionTest_5_1_initWithRxAndroidMainThreadSubscriptionTest_5_(self, outer$);
  return self;
}

- (void)onUnsubscribe {
  RxAndroidMainThreadSubscriptionTest_shortSleep(this$0_->this$0_);
  if (AndroidOsLooper_myLooper() != AndroidOsLooper_getMainLooper()) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Wrong thread");
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$called_)) setWithBoolean:true];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxAndroidMainThreadSubscriptionTest_5:);
  methods[1].selector = @selector(onUnsubscribe);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxAndroidMainThreadSubscriptionTest_5;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxAndroidMainThreadSubscriptionTest_5;", "run" };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscriptionTest_5_1 = { "", "rx.android", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxAndroidMainThreadSubscriptionTest_5_1;
}

@end

void RxAndroidMainThreadSubscriptionTest_5_1_initWithRxAndroidMainThreadSubscriptionTest_5_(RxAndroidMainThreadSubscriptionTest_5_1 *self, RxAndroidMainThreadSubscriptionTest_5 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  RxAndroidMainThreadSubscription_init(self);
}

RxAndroidMainThreadSubscriptionTest_5_1 *new_RxAndroidMainThreadSubscriptionTest_5_1_initWithRxAndroidMainThreadSubscriptionTest_5_(RxAndroidMainThreadSubscriptionTest_5 *outer$) {
  J2OBJC_NEW_IMPL(RxAndroidMainThreadSubscriptionTest_5_1, initWithRxAndroidMainThreadSubscriptionTest_5_, outer$)
}

RxAndroidMainThreadSubscriptionTest_5_1 *create_RxAndroidMainThreadSubscriptionTest_5_1_initWithRxAndroidMainThreadSubscriptionTest_5_(RxAndroidMainThreadSubscriptionTest_5 *outer$) {
  J2OBJC_CREATE_IMPL(RxAndroidMainThreadSubscriptionTest_5_1, initWithRxAndroidMainThreadSubscriptionTest_5_, outer$)
}
