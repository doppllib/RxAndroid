//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxAndroid/rxandroid/src/test/java/rx/android/schedulers/AndroidSchedulersTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxAndroidPluginsRxAndroidPlugins.h"
#include "RxAndroidPluginsRxAndroidSchedulersHook.h"
#include "RxAndroidSchedulersAndroidSchedulers.h"
#include "RxAndroidSchedulersAndroidSchedulersTest.h"
#include "RxAndroidTestutilEmptyScheduler.h"
#include "RxScheduler.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersAndroidSchedulersTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxAndroidSchedulersAndroidSchedulersTest__Annotations$1();

@interface RxAndroidSchedulersAndroidSchedulersTest_1 : RxAndroidPluginsRxAndroidSchedulersHook {
 @public
  RxScheduler *val$scheduler_;
}

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0;

- (RxScheduler *)getMainThreadScheduler;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidSchedulersAndroidSchedulersTest_1)

__attribute__((unused)) static void RxAndroidSchedulersAndroidSchedulersTest_1_initWithRxScheduler_(RxAndroidSchedulersAndroidSchedulersTest_1 *self, RxScheduler *capture$0);

__attribute__((unused)) static RxAndroidSchedulersAndroidSchedulersTest_1 *new_RxAndroidSchedulersAndroidSchedulersTest_1_initWithRxScheduler_(RxScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersAndroidSchedulersTest_1 *create_RxAndroidSchedulersAndroidSchedulersTest_1_initWithRxScheduler_(RxScheduler *capture$0);

@implementation RxAndroidSchedulersAndroidSchedulersTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidSchedulersAndroidSchedulersTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUpAndTearDown {
  [((RxAndroidPluginsRxAndroidPlugins *) nil_chk(RxAndroidPluginsRxAndroidPlugins_getInstance())) reset];
}

- (void)mainThreadCallsThroughToHook {
  RxScheduler *scheduler = create_RxAndroidTestutilEmptyScheduler_init();
  [((RxAndroidPluginsRxAndroidPlugins *) nil_chk(RxAndroidPluginsRxAndroidPlugins_getInstance())) registerSchedulersHookWithRxAndroidPluginsRxAndroidSchedulersHook:create_RxAndroidSchedulersAndroidSchedulersTest_1_initWithRxScheduler_(scheduler)];
  RxScheduler *mainThread = RxAndroidSchedulersAndroidSchedulers_mainThread();
  OrgJunitAssert_assertSameWithId_withId_(scheduler, mainThread);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUpAndTearDown);
  methods[2].selector = @selector(mainThreadCallsThroughToHook);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxAndroidSchedulersAndroidSchedulersTest__Annotations$0, (void *)&RxAndroidSchedulersAndroidSchedulersTest__Annotations$1 };
  static const J2ObjcClassInfo _RxAndroidSchedulersAndroidSchedulersTest = { "AndroidSchedulersTest", "rx.android.schedulers", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxAndroidSchedulersAndroidSchedulersTest;
}

@end

void RxAndroidSchedulersAndroidSchedulersTest_init(RxAndroidSchedulersAndroidSchedulersTest *self) {
  NSObject_init(self);
}

RxAndroidSchedulersAndroidSchedulersTest *new_RxAndroidSchedulersAndroidSchedulersTest_init() {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersAndroidSchedulersTest, init)
}

RxAndroidSchedulersAndroidSchedulersTest *create_RxAndroidSchedulersAndroidSchedulersTest_init() {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersAndroidSchedulersTest, init)
}

IOSObjectArray *RxAndroidSchedulersAndroidSchedulersTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore(), create_OrgJunitAfter() } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxAndroidSchedulersAndroidSchedulersTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidSchedulersAndroidSchedulersTest)

@implementation RxAndroidSchedulersAndroidSchedulersTest_1

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0 {
  RxAndroidSchedulersAndroidSchedulersTest_1_initWithRxScheduler_(self, capture$0);
  return self;
}

- (RxScheduler *)getMainThreadScheduler {
  return val$scheduler_;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxScheduler:);
  methods[1].selector = @selector(getMainThreadScheduler);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxAndroidSchedulersAndroidSchedulersTest;", "mainThreadCallsThroughToHook" };
  static const J2ObjcClassInfo _RxAndroidSchedulersAndroidSchedulersTest_1 = { "", "rx.android.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxAndroidSchedulersAndroidSchedulersTest_1;
}

@end

void RxAndroidSchedulersAndroidSchedulersTest_1_initWithRxScheduler_(RxAndroidSchedulersAndroidSchedulersTest_1 *self, RxScheduler *capture$0) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  RxAndroidPluginsRxAndroidSchedulersHook_init(self);
}

RxAndroidSchedulersAndroidSchedulersTest_1 *new_RxAndroidSchedulersAndroidSchedulersTest_1_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxAndroidSchedulersAndroidSchedulersTest_1, initWithRxScheduler_, capture$0)
}

RxAndroidSchedulersAndroidSchedulersTest_1 *create_RxAndroidSchedulersAndroidSchedulersTest_1_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxAndroidSchedulersAndroidSchedulersTest_1, initWithRxScheduler_, capture$0)
}
